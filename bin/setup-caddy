#!/bin/bash

set -euo pipefail

. $(dirname $(realpath $0))/karen-helper

env=${1:-}
mode=${2:-reload}

# Validate mode parameter
case "$mode" in
    reload|restart|status) ;;
    *)
        echo "Error: Invalid mode '$mode'. Valid modes: reload, restart, status"
        exit 1
        ;;
esac

service=caddy.service

env_status() {
    $MASTER/php/tools/setup-php status
    if [ -f /etc/caddy/environment.caddyfile ]; then
        activeenv=$(basename $(realpath /etc/caddy/environment.caddyfile 2>/dev/null) .caddyfile)
    else
        activeenv=
    fi
    if [ "$activeenv" = "development" ]; then
        echo "🛠️  Caddy environment: DEVELOPMENT"
    elif [ "$activeenv" = "production" ]; then
        echo "🚀 Caddy environment: PRODUCTION"
    else
        echo "❌ Unknown Caddy environment $activeenv"
    fi
}

case "$env" in
    dev|development)
        enable=development
        disable=production
        ;;
    prod|production)
        enable=production
        disable=development
        ;;

    status)
        env_status
        exit $?
        ;;
    *)
        env_status
        echo
        echo "Usage: $PGM {dev|prod}" | grep --color "$PGM.*"
        echo ""
        echo "Options:"
        echo "  dev/development  - Switch to development environment"
        echo "  prod/production  - Switch to production environment" 
        echo "  status          - Show current environment"
        exit
esac

$MASTER/php/tools/setup-php $enable $mode

echo "Switching Caddy to $enable environment..."

# Link the main system environment config file
# sudo rm -f "/etc/caddy/environment.caddyfile" || true
sudo ln -sf "$MASTER/caddy/environment/common.caddyfile" "/etc/caddy/"
# sudo rm -f "/etc/caddy/environment.caddyfile" || true
sudo ln -sf "$MASTER/caddy/environment/$enable.caddyfile" "/etc/caddy/environment.caddyfile"

# Make all configs available, enabled them on a server-base, defaults set during installation
# Use same semantic as in apache and nginx
[ ! -d "/etc/caddy/conf-available/" ] \
&& sudo mkdir -p /etc/caddy/conf-available \
&& sudo chown caddy:caddy /etc/caddy/conf-available

[ ! -d "/etc/caddy/conf-enabled/" ] \
&& sudo mkdir -p /etc/caddy/conf-enabled \
&& sudo chown caddy:caddy /etc/caddy/conf-enabled

ls $MASTER/caddy/conf/*.caddyfile >/dev/null 2>/dev/null \
&& sudo ln -sf $MASTER/caddy/conf/*.caddyfile /etc/caddy/conf-available/

# Same logic for snippets, except they don't need -available/-enabled stuff
[ ! -d "/etc/caddy/snippets/" ] \
&& sudo mkdir -p /etc/caddy/snippets \
&& sudo chown caddy:caddy /etc/caddy/snippets

# Setup local directory for server-specific snippet overrides
# This directory contains server-specific configs manually chosen by server admin
# Available presets are in the repository under local-presets/ for reference
[ ! -d "/etc/caddy/local/" ] \
&& sudo mkdir -p /etc/caddy/local \
&& sudo chown caddy:caddy /etc/caddy/local

if ! realpath /etc/caddy/snippets | grep -qv "^$MASTER/etc/caddy/snippets$"; then
    echo "updating snippets"
    ls $MASTER/caddy/snippets/*.caddyfile >/dev/null 2>/dev/null \
    && sudo ln -sf $MASTER/caddy/snippets/*.caddyfile /etc/caddy/snippets/
fi

sudo systemctl $mode $service --no-pager && err=0 || err=$?
if [ $err -ne 0 ]; then
    systemctl status $service --no-pager
    exit $?
fi

echo $service ${mode}ed

env_status
