#!/bin/bash

# Web Performance Timing Analysis Script
# Usage: $PGM <URL> [iterations] [-a|--auth]

PGM=$(basename $0)
TMP=/tmp/$PGM.$$
# Store authentication cookies in user's config directory for better security
COOKIE_DIR="$HOME/.config/$PGM"
COOKIE_FILE="$COOKIE_DIR/auth.cookies"
AUTH_ENABLED=0
CURL_AUTH_PARAMS=""

insecure="-k"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Cleanup temporary files (but keep persistent cookies)
trap 'rm -f $TMP.*' EXIT

# Parse arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -a|--auth)
                AUTH_ENABLED=1
                shift
                ;;
            -*)
                echo "Unknown option $1"
                exit 1
                ;;
            *)
                if [ -z "$URL" ]; then
                    URL="$1"
                elif [ -z "$ITERATIONS" ]; then
                    ITERATIONS="$1"
                else
                    echo "Too many arguments"
                    exit 1
                fi
                shift
                ;;
        esac
    done
}

# Check if URL is provided
if [ $# -eq 0 ]; then
    echo "Usage: $PGM <URL> [iterations] [-a|--auth]"
    echo
    echo "Options:"
    echo "  -a, --auth    Enable authentication (use existing cookies or prompt for login)"
    echo
    echo "Look for:"
    echo "‚Ä¢ time_namelookup: DNS resolution time"
    echo "‚Ä¢ time_connect: TCP connection time" 
    echo "‚Ä¢ time_appconnect: SSL handshake time"
    echo "‚Ä¢ time_starttransfer: Server processing time (TTFB)"
    echo "‚Ä¢ time_total: Complete request time"
    echo
    echo "Run multiple tests to see performance consistency"

    exit 1
fi

# Parse command line arguments
parse_args "$@"

# Set defaults
URL="${URL:-}"
ITERATIONS="${ITERATIONS:-1}"

# Validate URL is provided
if [ -z "$URL" ]; then
    echo "Error: URL is required"
    exit 1
fi


# Handle authentication if enabled
setup_authentication() {
    if [ $AUTH_ENABLED -eq 1 ]; then
        echo -e "${BLUE}üîê Authentication enabled${NC}"
        
        # Ensure cookie directory exists
        if [ ! -d "$COOKIE_DIR" ]; then
            mkdir -p "$COOKIE_DIR"
            chmod 700 "$COOKIE_DIR"  # Restrict access to user only
            echo -e "${YELLOW}Created secure cookie directory: $COOKIE_DIR${NC}"
        fi
        
        # Check if we have existing cookies that contain authentication
        if [ -f "$COOKIE_FILE" ] && grep -q "wordpress_logged_in\|wp-settings\|PHPSESSID" "$COOKIE_FILE" 2>/dev/null; then
            echo -e "${GREEN}‚úì Found existing authentication cookies${NC}"
            echo "üßπüîê Cleanup! Delete $COOKIE_FILE if not needed anymore üóëÔ∏è"
            CURL_AUTH_PARAMS="-b $COOKIE_FILE"
        else
            echo -e "${YELLOW}No valid authentication cookies found. Please log in:${NC}"
            
            # Extract domain from URL for login
            DOMAIN=$(echo "$URL" | sed -n 's/.*\/\/\([^\/]*\).*/\1/p')
            LOGIN_URL="https://$DOMAIN/wp-login.php"
            
            # Prompt for credentials
            read -p "Username: " USERNAME
            read -s -p "Password: " PASSWORD
            echo
            
            # Perform login and save cookies
            echo -e "${YELLOW}Logging in...${NC}"
            LOGIN_RESPONSE=$(curl $insecure -s -c "$COOKIE_FILE" \
                -d "log=$USERNAME" \
                -d "pwd=$PASSWORD" \
                -d "wp-submit=Log In" \
                -d "redirect_to=$URL" \
                -X POST "$LOGIN_URL")
            
            # Check if login was successful by looking for authentication cookies
            if grep -q "wordpress_logged_in" "$COOKIE_FILE" 2>/dev/null; then
                echo -e "${GREEN}‚úì Authentication successful${NC}"
                CURL_AUTH_PARAMS="-b $COOKIE_FILE"
            else
                echo -e "${RED}‚úó Authentication failed${NC}"
                rm -f "$COOKIE_FILE"
                exit 1
            fi
        fi
        echo
    fi
}

# Setup authentication before running tests
setup_authentication

echo -e "${BLUE}üîç Web Performance Timing Analysis${NC}"
echo -e "${YELLOW}URL:${NC} $URL"
echo -e "${YELLOW}Iterations:${NC} $ITERATIONS"
if [ $AUTH_ENABLED -eq 1 ]; then
    echo -e "${YELLOW}Authentication:${NC} Enabled"
fi
echo

# Function to run single timing test
run_timing_test() {
    local iteration=$1
    local url=$2
    
    if [ $ITERATIONS -gt 1 ]; then
        echo -e "${YELLOW}--- Test $iteration ---${NC}"
    fi
    
    curl $insecure $CURL_AUTH_PARAMS -w "     time_namelookup:  %{time_namelookup}s
        time_connect:  %{time_connect}s  
     time_appconnect:  %{time_appconnect}s (SSL handshake)
    time_pretransfer:  %{time_pretransfer}s
       time_redirect:  %{time_redirect}s
  time_starttransfer:  %{time_starttransfer}s (time to first byte)
                     ----------
          time_total:  %{time_total}s
" -o /dev/null -s "$url"
    
    if [ $ITERATIONS -gt 1 ]; then
        echo
    fi
}

# Run timing tests
for i in $(seq 1 $ITERATIONS); do
    run_timing_test $i "$URL"
done
