#!/bin/bash

INSTALLUFW=yes
DEBUG=yes
PGM=$(basename $0)
TMP=$(mkdtemp -d /tmp/$PGM.XXXXXX)
trap "rm -rf $TMP" EXIT

RELEASE=$(lsb_release -sc)
[ "$RELEASE" ] || exit $?

if [ "$APTUPDATED" != "yes" ]
then
  apt update && APTUPDATED=yes || exit $?
fi
if [ "$APTUPGRADED" != "yes" ]
then
  apt -y upgrade && APTUPGRADED=yes || exit $?
fi

#sed -i "s:^# *\(deb.*backports\):\\1:" /etc/apt/sources.list
which rsync  >/dev/null && which git >/dev/null && which dnsutils >/dev/null
if [ $? -ne 0 ]
then
  echo Installing essential packages rsync git dnsutils 
  apt install -y rsync git dnsutils || exit $?
fi

[ ! -d /opt ] && mkdir /opt/
id magic >/dev/null
if [ $? -ne 0 ]
then
  echo $PGM: Creating user magic
  groupadd -g 1000 magic
  useradd -u1000 -g 1000 -s /bin/bash magic
  mkdir -p ~magic /opt/magic/.ssh
  cp ~/.ssh/authorized_keys ~magic/.ssh/
  chown -R magic:magic ~magic /opt/magic
  su - magic -c "git config --global user.email olivier@van-helden.net"
  su - magic -c "git config --global user.name \"Olivier van Helden ($HOSTNAME)\""
fi

[ ! -f /etc/sudoers.d/magic ] && echo "magic         ALL = (ALL) NOPASSWD: ALL" > /etc/sudoers.d/magic

[ ! -f ~magic/.ssh/id_rsa.pub ] \
  && su magic -c "ssh-keygen"
[ ! -f ~magic/.ssh/authorized_keys ] \
  && cp ~/.ssh/authorized_keys ~magic/.ssh/ \
  && chown -R magic:magic ~magic/.ssh

# su - magic -c "ssh git.magiiic.com exit"
[ $? -ne 0 ] && cat ~magic/.ssh/id_rsa.pub \
&& read -p "Add the key above to git server account and press enter..."
## add magic ssh key to gitlab, then execute as magic:

ssh-keyscan -H git.magiiic.com
[ -d /opt/magic ] || mkdir /opt/magic && chown magic:magic /opt/magic || exit $?

[ -d /opt/magic/bin ] && echo "$PGM: /opt/magic/bin present" || su - magic -c "git clone -b master git@git.magiiic.com:magic/bin.git /opt/magic/bin" || exit $?
echo ":$PATH:" | grep -q ":/opt/magic/bin:" || export PATH=$PATH:/opt/magic/bin
. /opt/magic/bin/helpers || exit $?
[ -d /opt/magic/etc ] && log "/opt/magic/etc present" || su - magic -c "git clone -b master git@git.magiiic.com:magic/etc.git /opt/magic/etc" || end $?

cd /etc/profile.d \
&& ls /opt/magic/etc/profile.d/*sh \
| while read file
do
  [ -e "$(basename $file)" ] && continue
  ln -s "$file" && log profile.d added $file
done
cd "$OLDPWD"

which emacs  >/dev/null && which rsync >/dev/null \
 || apt install -y emacs screen rsync git || end $?

 which zip  >/dev/null && which unzip >/dev/null \
  || apt install -y zip unzip || end $?

which ufw  >/dev/null
if [ $? -ne 0 ]
then
  apt install -y ufw || end $?
  chmod g-w /lib/ufw
  ufw default deny
  ufw default allow outgoing
  ufw allow SSH
  /opt/magic/bin/ufw-update-local-rules-and-servers || end $?
fi

which sshguard || apt install sshguard
myip=$(echo $SSH_CLIENT | cut -d " " -f 1)
if [ "$myip" ] && grep -vq "^$myip$" /etc/sshguard/whitelist
then
  echo $myip >> /etc/sshguard/whitelist
  service sshguard restart
fi

which mysql >/dev/null || if yesno "Install mariadb server?"
then
  apt install -y mariadb-client mariadb-server mysqltuner || end $?
  mysql_secure_installation
  if yesno "Configure mysql?"
  then
  	emacs /etc/mysql/my.cnf
  	service mysql restart || end $?
  fi
  cat /opt/magic/etc/servers | while read server ips
  do
    echo "Allowing mysql port for $server"
    for ip in $ips
    do
      printf "$ip "
      ufw allow from $ip to any port 3306
    done
  done
elif yesno "Install mariadb client?"
then
  apt install -y mariadb-client || end $?
fi

which apache2 >/dev/null || if yesno "Install apache and php?"
then
  ls /etc/apt/sources.list.d/php*.list 2>/dev/null
  if [ $? -ne 0 ]
  then
    apt -y install lsb-release apt-transport-https ca-certificates || end $?
    wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg || end $?
    echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" | tee /etc/apt/sources.list.d/php.list  || end $?
    apt update && apt upgrade
  fi

#  phpversion=$(apt search "php[0-9\.]*$" | cut -d " " -f 3 | grep "^php[0-9\.]*$" | sort | tail -1)
	# simple (ubuntu 16/debian 9):
	# apt install apache2 curl dbconfig-common  wwwconfig-common php libapache2-mod-php libapache2-mod-upload-progress php-mysql php-pgsql libapache2-mpm-itk
	# apt install  php-imagick php-gd php-curl php-imap php-intl
	# + complexe:
	apt install -y apache2 libapache2-mpm-itk apache2-utils imagemagick libapache2-mod-fcgid libapache2-mod-php libexpat1 memcached php-cli php-common php-curl php-gd php-imagick php-imap php php-intl php-memcached php-mysql php-pgsql php-pspell php-tidy php-xml  php-pear ssl-cert || end $?
  # php-opcache

	a2enmod actions auth_digest dav_fs dav include mpm_itk rewrite ssl || end $?
  ln -s /opt/magic/etc/apache2/002-magiiic-commons.conf /etc/apache2/conf-enabled/
  ln -s /opt/magic/etc/apache2/autoconfig.conf /etc/apache2/conf-enabled/
	# a2dissite 000-default.conf
	# a2ensite 000-magic-default.conf
	# newwebsite magic "$(hostname --long)"
	service apache2 restart
  rm /var/www/html/index.*; rsync -Wavz /opt/magic/etc/apache2/placeholder/ /var/www/html/


  sed -i "s:# *\(.*backports\):\\1:" /etc/apt/sources.list \
  && apt update && apt upgrade \
  && apt install -y certbot python-certbot-apache \
  && certbot --apache -m certmaster@magiiic.com --agree-tos -d "$(hostname -f)"

  if ! which composer >/dev/null
  then
    # Try to get last official version, otherwise fallback to apt
    php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" \
    && php ./composer-setup.php --install-dir=/usr/local/bin --filename=composer \
    && php -r "unlink('composer-setup.php');" \
    || apt install -y composer || end $?
  fi

  yesno "Install php xmlrpc?" && apt install php-xmlrpc
  # yesno "Install php xcache?" && apt install php-xcache && service apache2 restart
  ufw allow "WWW Full"
fi

if which apache2 >/dev/null 
then 
  which wp >/dev/null || if yesno "Install wp-cli?"; then
    apt install -y apache2 apache2-utils libapache2-mpm-itk mariadb-client \
    libapache2-mod-php php php-cli php-common php-curl php-gd php-imagick \
    php-imap php-mysql php-mbstring php-zip php-soap || end $?
    a2enmod rewrite
    service apache2 reload
    cd $(mktemp -d)
    curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar \
    && echo "wp-cli.phar downloaded to $(realpath wp-cli.phar)" \
    && php $PWD/wp-cli.phar --info  | grep "WP-CLI version:"\
    && echo "and $PWD/wp-cli.phar it's working" \
    && chmod +x wp-cli.phar \
    && mv wp-cli.phar /usr/local/bin/wp \
    && echo moved to  /usr/local/bin/wp \
    || end $? error installing wp

    [ -f /opt/magic/etc/bash_completion.d/wp-completion.bash ] \
    && ln -s /opt/magic/etc/bash_completion.d/wp-completion.bash /etc/bash_completion.d/ \
    || (
      curl -L -O https://raw.githubusercontent.com/wp-cli/wp-cli/master/utils/wp-completion.bash \
      && echo "downloaded $(realpath wp-completion.bash)" \
      && mv wp-completion.bash /etc/bash_completion.d/ \
    ) \
    && echo "bash completion added to /etc/bash_completion.d/" \
    || log $? wp installed but not bash completion
  fi
fi

which mono >/dev/null || if yesno "Install mono?"
then
  apt install -y mono-complete || end $?
  # a2enmod mod_mono
  # service apache2 restart
fi
which mono >/dev/null || end 1 "opensimulator requires mono"

if yesno "Automatic updates?"; then
  # apt update && apt upgrade
  apt install unattended-upgrades
  grep -q "^\s*Unattended-Upgrade::Mail\s" /etc/apt/apt.conf.d/50unattended-upgrades \
  || ( echo; echo "// Added by magic"; echo "Unattended-Upgrade::Mail webmaster@$(hostname -d);" ) | tee -a /etc/apt/apt.conf.d/50unattended-upgrades
  dpkg-reconfigure --priority=low unattended-upgrades
fi

exit
